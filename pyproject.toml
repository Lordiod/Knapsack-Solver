[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "knapsack-problem-solver"
description = "A professional GUI application for solving 0/1 and Fractional Knapsack problems"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Knapsack Solver Contributors"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Mathematics",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["knapsack", "algorithm", "gui", "optimization", "education"]
requires-python = ">=3.7"
dependencies = [
    "customtkinter>=5.0.0",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/yourusername/Knapsack-Solver"
"Bug Tracker" = "https://github.com/yourusername/Knapsack-Solver/issues"
"Documentation" = "https://github.com/yourusername/Knapsack-Solver#readme"
"Source Code" = "https://github.com/yourusername/Knapsack-Solver"

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "isort>=5.0",
]

[project.scripts]
knapsack-solver = "main:main"

[tool.setuptools]
packages = ["models", "utils", "gui"]

[tool.setuptools_scm]
write_to = "_version.py"

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=models",
    "--cov=utils",
    "--cov=gui",
]

[tool.coverage.run]
source = ["models", "utils", "gui"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
